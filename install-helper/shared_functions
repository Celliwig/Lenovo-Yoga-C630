###################################################################################################################################################
# Defaults
###################################################################################################################################################
DEFAULT_KERNEL_ARGS='efi=novamap pd_ignore_unused clk_ignore_unused'

###################################################################################################################################################
# URLs
###################################################################################################################################################
GIT_EUDEV_REPO="https://github.com/gentoo/eudev.git"
GIT_GRUB_REPO="https://git.savannah.gnu.org/git/grub.git"
FEDORA_GPG_KEYS="https://getfedora.org/static/fedora.gpg"

###################################################################################################################################################
# Paths
###################################################################################################################################################
CWD=$PWD

# Build paths
DIR_CMDLINE="${CWD}/cmdline-patch"
DIR_EUDEV="${CWD}/eudev"
DIR_EXTRAS="${CWD}/extras"
DIR_GRUBCFG="${CWD}/grub-cfg"
DIR_GRUBPKG="${CWD}/grub_pkg"
DIR_GRUBSRC="${CWD}/grub_src"
DIR_INITRD="${CWD}/initrd"
DIR_INITRD_GPGKEYS="${DIR_INITRD}/gpgkeys"
DIR_MAKEJAIL="${CWD}/makejail"
DIR_PKGS="${CWD}/pkgs"
DIR_USBKEY="${CWD}/usb_key"
DIR_USBKEY_BOOT="${DIR_USBKEY}/boot"
DIR_USBKEYFILES="${CWD}/usb_key-files"

# UEFI System partition paths
EFI_BOOT="/EFI/Boot"
EFI_GRUB="/EFI/grub"
EFI_GRUBCFG="${EFI_GRUB}/grub.cfg"
EFI_GRUBCFG_DIR="${EFI_GRUB}/grub.cfg.d"

###################################################################################################################################################
# Defines
###################################################################################################################################################
HOST_ARCH=`uname -m`

GPG_KEY_EMAIL="celliwig@nym.hush.com"
GPG_KEY_ID="F0122431576EC9C25C07538544EB9AB150561073"
GPG_KEY_PATH="${CWD}/keys/celliwig.asc"

TXT_UNDERLINE="\033[1m\033[4m"
TXT_NORMAL="\033[0m"

###################################################################################################################################################
# Functions
###################################################################################################################################################
okay_failedexit () {
	if [ $1 -eq 0 ]; then
		echo "Okay"
	else
		echo "Failed"
		exit
	fi
}

identify_package_type () {
	file -0 -F "" "${1}" |awk -F "\0" 'BEGIN {RTN="unknown"}; /Debian binary package/ {RTN="debian"}; /RPM/ {RTN="redhat"}; END {print RTN}'
}

identify_package_arch () {
	local pkg_path=${1}
	local pkg_type=`identify_package_type "${pkg_path}"`
	local retval=-1

	local pkg_arch="${HOST_ARCH}"
	# Extract alledged architecture from package
	case "${pkg_type}" in
		"debian")
			pkg_arch=`dpkg -f "${pkg_path}" Architecture`
			retval=${?}
			;;
		"redhat")
			pkg_arch=`rpm -q --qf "%{arch}" -p "${pkg_path}"  2> /dev/null`
			retval=${?}
			;;
		*)
			pkg_arch="Unknown"
			retval=-1
			;;
	esac

	# Standardise architecture string
	case "${pkg_arch}" in
		"arm64")
			pkg_arch="aarch64"
			;;
	esac

	echo -n "${pkg_arch}"
	return ${retval}
}

# Copies the contents of one directory to another
# This is done in a way to be mindful of symlinks in the target directory
copy_source_2_target () {
	local dir_source="${1}"
	local dir_target="${2}"

	for tmp_item_source in `ls "${dir_source}"`; do							# Cycle through the source directory contents
		local path_item_source="${dir_source}"/"${tmp_item_source}"
		local path_item_target="${dir_target}"/"${tmp_item_source}"
		if [ -e "${path_item_target}" ]; then							# Check if the destination exists
			local path_item_target_abs=`realpath "${path_item_target}"`			# Follow any symlinks
			if [ $? -ne 0 ]; then								# Check realpath status code
				return 1								# It failed, so this failed
			fi
			sudo cp -a "${path_item_source}"/* "${path_item_target_abs}" &> /dev/null	# Copy the contents of the directory, to the 'realpath'
			if [ $? -ne 0 ]; then								# Check copy status code
				return 1								# It failed, so this failed
			fi
		else
			sudo cp -a "${path_item_source}" "${dir_target}" &> /dev/null			# Item doesn't exist, just copy
			if [ $? -ne 0 ]; then								# Check copy status code
				return 1								# It failed, so this failed
			fi
		fi
	done

	return 0											# Return okay
}

# Initrd
###################################################################################################################################################
# Builds base initrd directory using makejail
initrd_build_base_using_makejail () {
	# Make a tmpfs on /opt to copy our local utils into
	echo -n "	Making temporary /opt: "
	sudo mount -t tmpfs none /opt &> /dev/null
	okay_failedexit $?
	# TmpFS will mount as 777, so reset ACLs
	sudo chmod 755 /opt

	# Make cmdline-patch
	echo -n "	Making cmdline-patch: "
	cd "${DIR_CMDLINE}"
	make cmdline-patch &> /dev/null
	okay_failedexit $?
	cd "${CWD}"
	sudo cp "${DIR_CMDLINE}/cmdline-patch" "/opt" &> /dev/null

	# Make grub-cfg
	echo -n "	Making grub-cfg: "
	cd "${DIR_GRUBCFG}"
	make grub-cfg &> /dev/null
	okay_failedexit $?
	cd "${CWD}"
	sudo cp "${DIR_GRUBCFG}/grub-cfg" "/opt" &> /dev/null

	MAKEJAIL_CFG_NAME="install-helper-initrd.py"
	MAKEJAIL_CFG_PATH="${DIR_MAKEJAIL}/${MAKEJAIL_CFG_NAME}"
	echo -n "	Generating makejail configuration: "
	"${DIR_MAKEJAIL}"/makejail-config "${DIR_INITRD}" "${MAKEJAIL_CFG_NAME}"
	okay_failedexit $?

	MAKEJAIL_CFG_CHKFILES=`"${DIR_MAKEJAIL}"/makejail-chkfiles "${MAKEJAIL_CFG_PATH}"`
	if [ ${?} -ne 0 ]; then
		echo "Please install the following files:"
		echo "${MAKEJAIL_CFG_CHKFILES}"
		exit
	fi

	echo -n "	Running makejail: "
	sudo makejail "${MAKEJAIL_CFG_PATH}" &> /dev/null
	okay_failedexit $?

	# Build and install eudev
	echo "	Building eudev"
	if [ -d "${DIR_EUDEV}" ]; then
		echo "		${DIR_EUDEV} already exists"
		local eudev_git_update=""
		read -r -p "		Update existing repo? (y/n): " eudev_git_update
		if [[ "${eudev_git_update}" = [Yy] ]]; then
			cd "${DIR_EUDEV}"
			git pull &> /dev/null
			retval="${?}"
			cd "${CWD}"
			if [ "${retval}" -ne 0 ]; then
				echo "		git pull failed!!!"
				exit 1
			fi
		fi
	else
		echo "		No eudev repo."
		local eudev_git_clone=""
		read -r -p "		Clone eudev repository? (y/n): " eudev_git_clone
		if [[ "${eudev_git_clone}" = [Yy] ]]; then
			git clone "${GIT_EUDEV_REPO}" "${DIR_EUDEV}" &> /dev/null
			retval="${?}"
			if [ "${retval}" -ne 0 ]; then
				echo "		git clone failed!!!"
				exit 1
			fi
		fi
	fi
	if [ -d "${DIR_EUDEV}" ]; then
		cd "${DIR_EUDEV}"

		echo -n "		eudev - Running autogen.sh: "
		./autogen.sh &> /dev/null
		okay_failedexit $?
		echo -n "		eudev - Running configure: "
		./configure --prefix=/usr \
				--sysconfdir=/etc \
				--disable-manpages \
				--disable-static &> /dev/null
		okay_failedexit $?
		echo -n "		eudev - Running make: "
		make &> /dev/null
		okay_failedexit $?
		echo -n "		eudev - Running make install: "
		sudo make DESTDIR="${DIR_INITRD}" install &> /dev/null
		okay_failedexit $?
		cd "${CWD}"

		echo -n "		eudev - Creating hardware database: "
		sudo chroot initrd/ /usr/sbin/udevadm hwdb --update &> /dev/null
		okay_failedexit $?
	fi

	# Unmount /opt as we're finished with it
	sudo umount /opt
}

# Builds base initrd directory by extracting existing archive
initrd_build_base_using_package () {
	local target_arch="${1}"

	local base_initrd="${DIR_PKGS}/initrd.img.${target_arch}.tgz"
	local base_initrd_sig="${DIR_PKGS}/initrd.img.${target_arch}.tgz.asc"

	echo -e "	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo -e "	!!!			HOST ARCHITECTURE DOES NOT MATCH TARGET				!!!"
	if [ -f "${base_initrd}" ]; then
		echo -e "	!!!											!!!"
		echo -e "	!!! A base initrd image is available for target: ${target_arch}				!!!"
		echo -e "	!!!											!!!"
		echo -e "	!!! While every effort is made to produce a clean initrd image, use at your own risk.	!!!"
		echo -e "	!!! No warranty is implied or given.							!!!"
		echo -e "	!!!											!!!"
		echo -e "	!!! Images are signed however, so import the public key into your gpg keying if you	!!!"
		echo -e "	!!! wish to check the veracity of the file.						!!!"
		echo -e "	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

		# Check for signing key
		echo -n "	Check for signature key: "
		gpg --list-keys "${GPG_KEY_ID}" &> /dev/null
		local signature_key_installed=${?}
		if [ ${signature_key_installed} -eq 0 ]; then
			echo "Found"
		else
			echo "Not Found"
		fi

		# Import signature public key into keyring
		local signature_key_install="n"
		if [ ${signature_key_installed} -ne 0 ]; then
			if [ -f "${GPG_KEY_PATH}" ]; then
				echo -n "	Import signature key? (y/N): "
				read -r signature_key_install
				if [[ "${signature_key_install}" = [Yy] ]]; then
					echo -n "	Importing signature key: "
					gpg --import "${GPG_KEY_PATH}" &> /dev/null
					okay_failedexit $?
				fi
			else
				echo "	Public key not found."
				exit -1
			fi
		fi

		# Check image against signature
		echo -n "	Checking image signature: "
		gpg --list-keys "${GPG_KEY_ID}" &> /dev/null
		signature_key_installed=${?}
		local signature_key_msg=""
		local signature_key_error=0
		if [ ${signature_key_installed} -eq 0 ]; then
			if [ -f "${base_initrd_sig}" ]; then
				gpg --verify "${base_initrd_sig}" &> /dev/null
				if [ ${?} -eq 0 ]; then
					signature_key_msg="Okay"
					signature_key_error=0
				else
					signature_key_msg="Failed"
					signature_key_error=2
				fi
			else
				signature_key_msg="No signature file"
				signature_key_error=1
			fi
		else
			signature_key_msg="No public key"
			signature_key_error=1
		fi
		echo "${signature_key_msg}"
		local signature_key_response
		if [ ${signature_key_error} -ne 0 ]; then
			if [ ${signature_key_error} -eq 2 ]; then
				exit -1
			fi

			echo -n "	Do you want to continue (y/N): "
			read -r signature_key_response
			if [[ "${signature_key_response}" = [Nn] ]]; then
				exit -1
			fi
		fi

		# Clean existing contents
		echo "	Removing existing contents"
		sudo rm -rf "${DIR_INITRD}"/* &> /dev/null

		# Extracting initrd image
		echo -n "	Extracting initrd image: "
		sudo tar -xzf "${base_initrd}" &> /dev/null
		okay_failedexit $?
	else
		echo -e "	!!!											!!!"
		echo -e "	!!! NO BASE INITRD IMAGE AVAILABLE FOR TARGET: ${target_arch}					!!!"
		echo -e "	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		exit -1
	fi
}

# Builds base initrd directory
initrd_build_base () {
	local target_arch="${1}"

	# Run sudo to make sure we're authenticated (and not mess with displayed text)
	sudo ls &> /dev/null

	if [ ! -d "${DIR_INITRD}" ]; then
		echo -n "	Creating initrd image directory: "
		mkdir "${DIR_INITRD}" &> /dev/null
		okay_failedexit $?
	fi

	if [[ "${target_arch}" == "${HOST_ARCH}" ]]; then
		initrd_build_base_using_makejail
	else
		initrd_build_base_using_package "${target_arch}"
	fi
}

# GRUB
###################################################################################################################################################
# Install GRUB from source
grub_install_from_src () {
	local grub_source="${1}"
	local grub_target="${2}"/"${EFI_GRUB}"
	local grub_target_mods="${grub_target}"/modules
	local grub_efi_command="${grub_target}"/BOOTAA64.EFI

	if [ -d "${grub_source}" ]; then
		echo "	${grub_source} already exists"
		local install_grub_git_update=""
		read -r -p "	Update existing repo? (y/n): " install_grub_git_update
		if [[ "${install_grub_git_update}" = [Yy] ]]; then
			cd "${grub_source}"
			git pull &> /dev/null
			retval="${?}"
			cd "${CWD}"
			if [ "${retval}" -ne 0 ]; then
				echo "	git pull failed!!!"
				exit 1
			fi
		fi
	else
		echo "	No GRUB repo."
		local install_grub_git_clone=""
		read -r -p "	Clone GRUB repository? (y/n): " install_grub_git_clone
		if [[ "${install_grub_git_clone}" = [Yy] ]]; then
			git clone "${GIT_GRUB_REPO}" "${grub_source}" &> /dev/null
			retval="${?}"
			if [ "${retval}" -ne 0 ]; then
				echo "	git clone failed!!!"
				exit 1
			fi
		fi
	fi
	if [ -d "${grub_source}" ]; then
		cd "${grub_source}"

		local install_grub_build=""
		read -r -p "	(Re)Build GRUB source? (y/n): " install_grub_build
		if [[ "${install_grub_build}" = [Yy] ]]; then
			echo -n "	GRUB - Running bootstrap: "
			./bootstrap &> /dev/null
			okay_failedexit $?
			echo -n "	GRUB - Running autogen: "
			./autogen.sh &> /dev/null
			okay_failedexit $?
			echo -n "	GRUB - Running configure: "
			local install_grub_config_out=`./configure|awk 'BEGIN { PRNT=0; } $1 == "*******************************************************" { PRNT=1; } { if (PRNT) print $0; } '`
			okay_failedexit $?
			while IFS= read -r tmp_config_line; do
				echo "		${tmp_config_line}"
			done <<< "${install_grub_config_out}"
			echo -n "	GRUB - Running make: "
			make -j 2 &> /dev/null
			okay_failedexit $?
		fi
		if [ -d "${grub_target}" ]; then			# Remove the existing grub directory
			rm -rf "${grub_target}" &> /dev/null
		fi
		mkdir -p "${grub_target_mods}" &> /dev/null
		echo -n "	GRUB - Installing boot loader: "
		./grub-mkimage --directory grub-core --prefix "${EFI_GRUB}" --output "${grub_efi_command}" --format arm64-efi \
			part_gpt part_msdos ntfs ntfscomp hfsplus fat ext2 normal chain boot configfile linux minicmd \
			gfxterm all_video efi_gop video_fb font video loadenv disk test gzio bufio gettext terminal \
			crypto extcmd boot fshelp search iso9660 &> /dev/null
		okay_failedexit $?
		echo -n "	GRUB - Copying modules: "
		cp grub-core/*.{mod,lst} "${grub_target_mods}" &> /dev/null
		okay_failedexit $?
		cd "${CWD}"
	fi

	return 0
}

# Install GRUB from package
grub_install_from_pkg () {
        local target_dir="${1}"
        local target_grub_dir="${target_dir}"/"${EFI_GRUB}"
	local target_arch="${2}"

	local grub_pkg="${DIR_PKGS}/grub.${target_arch}.tgz"
	local grub_pkg_sig="${DIR_PKGS}/grub.${target_arch}.tgz.asc"

	echo -e "	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo -e "	!!!			HOST ARCHITECTURE DOES NOT MATCH TARGET				!!!"
	if [ -f "${grub_pkg}" ]; then
		echo -e "	!!!											!!!"
		echo -e "	!!! A GRUB package is available for target: ${target_arch}				!!!"
		echo -e "	!!!											!!!"
		echo -e "	!!! While every effort is made to produce a clean GRUB bootloader, use at your own risk.!!!"
		echo -e "	!!! No warranty is implied or given.							!!!"
		echo -e "	!!!											!!!"
		echo -e "	!!! Images are signed however, so import the public key into your gpg keying if you	!!!"
		echo -e "	!!! wish to check the veracity of the file.						!!!"
		echo -e "	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

		# Check for signing key
		echo -n "	Check for signature key: "
		gpg --list-keys "${GPG_KEY_ID}" &> /dev/null
		local signature_key_installed=${?}
		if [ ${signature_key_installed} -eq 0 ]; then
			echo "Found"
		else
			echo "Not Found"
		fi

		# Import signature public key into keyring
		local signature_key_install="n"
		if [ ${signature_key_installed} -ne 0 ]; then
			if [ -f "${GPG_KEY_PATH}" ]; then
				echo -n "	Import signature key? (y/N): "
				read -r signature_key_install
				if [[ "${signature_key_install}" = [Yy] ]]; then
					echo -n "	Importing signature key: "
					gpg --import "${GPG_KEY_PATH}" &> /dev/null
					okay_failedexit $?
				fi
			else
				echo "	Public key not found."
				exit -1
			fi
		fi

		# Check image against signature
		echo -n "	Checking image signature: "
		gpg --list-keys "${GPG_KEY_ID}" &> /dev/null
		signature_key_installed=${?}
		local signature_key_msg=""
		local signature_key_error=0
		if [ ${signature_key_installed} -eq 0 ]; then
			if [ -f "${grub_pkg_sig}" ]; then
				gpg --verify "${grub_pkg_sig}" &> /dev/null
				if [ ${?} -eq 0 ]; then
					signature_key_msg="Okay"
					signature_key_error=0
				else
					signature_key_msg="Failed"
					signature_key_error=2
				fi
			else
				signature_key_msg="No signature file"
				signature_key_error=1
			fi
		else
			signature_key_msg="No public key"
			signature_key_error=1
		fi
		echo "${signature_key_msg}"
		local signature_key_response
		if [ ${signature_key_error} -ne 0 ]; then
			if [ ${signature_key_error} -eq 2 ]; then
				exit -1
			fi

			echo -n "	Do you want to continue (y/N): "
			read -r signature_key_response
			if [[ "${signature_key_response}" = [Nn] ]]; then
				exit -1
			fi
		fi

		# Clean existing contents
		echo "	Removing GRUB installation"
		sudo rm -rf "${target_grub_dir}"/* &> /dev/null

		# Change to target directory
		cd "${target_dir}"

		# Extracting GRUB package
		echo -n "	Extracting GRUB package: "
		sudo tar --no-same-owner --strip-components=1 -xzf "${grub_pkg}" &> /dev/null
		okay_failedexit $?

		cd "${CWD}"
	else
		echo -e "	!!!											!!!"
		echo -e "	!!! NO GRUB PACKAGE AVAILABLE FOR TARGET: ${target_arch}					!!!"
		echo -e "	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		exit -1
	fi

	return 0
}

# Set GRUB as default boot loader
grub_set_default () {
	local grub_install_path="${1}"/"${EFI_GRUB}"
	local grub_efi_command="${grub_install_path}"/BOOTAA64.EFI
	local grub_boot_path="${1}"/"${EFI_BOOT}"

	# Create boot directory if it doesn't exist
	if [ ! -d "${grub_boot_path}" ]; then
		echo -n "	Creating EFI boot directory: "
		mkdir -p "${grub_boot_path}" &> /dev/null
		okay_failedexit $?
	fi

	# Copy GRUB binary to default location
	echo -n "	GRUB - Set as default bootloader: "
	cp "${grub_efi_command}" "${grub_boot_path}"
	okay_failedexit $?

	return 0
}

# Write main GRUB config
grub_config_write_main () {
	local base_dir="${1}"
	local grub_config_path="${1}"/"${EFI_GRUBCFG}"
	local grub_config_dir="${1}"/"${EFI_GRUBCFG_DIR}"

	# Create GRUB configuration directory if it doesn't exist
	if [ ! -d "${grub_config_dir}" ]; then
		echo -n "	Creating EFI config directory: "
		mkdir -p "${grub_config_dir}" &> /dev/null
		okay_failedexit $?
	fi

	rm "${grub_config_path}" &> /dev/null
	echo "	Creating grub.cfg"
	touch "${grub_config_path}"
	echo "set menu_color_normal=white/black" >> "${grub_config_path}"
	echo "set menu_color_highlight=black/light-gray" >> "${grub_config_path}"
	echo "if background_color 44,0,30,0; then" >> "${grub_config_path}"
	echo "	clear" >> "${grub_config_path}"
	echo "fi" >> "${grub_config_path}"
	echo "" >> "${grub_config_path}"
	echo "insmod gzio" >> "${grub_config_path}"
	echo "set timeout=30" >> "${grub_config_path}"
	echo "" >> "${grub_config_path}"

	for tmp_configfile in `ls "${grub_config_dir}"`; do
		tmp_configfile=`echo "${tmp_configfile}"| sed "s|${base_dir}||"`
		echo "source ${EFI_GRUBCFG_DIR}/${tmp_configfile}" >> "${grub_config_path}"
	done

	return 0
}

# Write individual GRUB menu items
grub_config_write_menuitem () {
	local base_dir="${1}"
	local grub_config_path="${1}"/"${EFI_GRUBCFG}"
	local grub_config_dir="${1}"/"${EFI_GRUBCFG_DIR}"
	local kernel_name="${2}"
	local grub_config_menuitem="${grub_config_dir}"/"${kernel_name}.cfg"
	local kernel_version=`echo "${2}" |sed 's|vmlinuz||'`
	local kernel_dtbs_dir="/usr/lib/linux-image${kernel_version}"
	local kernel_dtbs_fullpath="${1}${kernel_dtbs_dir}"

	# Check kernel image exists
	if [ ! -f "${base_dir}"/boot/"${kernel_name}" ]; then
		echo "	Kernel image ${kernel_name} does not exist!"
		return -1
	fi

	# Create GRUB configuration directory if it doesn't exist
	if [ ! -d "${grub_config_dir}" ]; then
		echo -n "	Creating EFI config directory: "
		mkdir -p "${grub_config_dir}" &> /dev/null
		okay_failedexit $?
	fi

	echo "	Creating kernel grub.cfg"

	local kernel_args="${DEFAULT_KERNEL_ARGS}"
	kernel_args=`dialog --stdout --clear --title "install-helper" \
				--inputbox "Enter kernel arguments for ${kernel_name}:" 10 70 "${kernel_args}"`
	if [ $? -eq 0 ]; then
		kernel_args="${DEFAULT_KERNEL_ARGS}"				# If canceled, load defaults
	fi

	local dialog_checkbox_lst=""
	local kernel_dtb_path=""
	for kernel_dtb_path in `find "${kernel_dtbs_fullpath}" -name \*\.dtb`; do
		kernel_dtb_path=`echo "${kernel_dtb_path}"| sed "s|${kernel_dtbs_fullpath}||"`
		local dtb_tmp_name=`basename "${kernel_dtb_path}"`
		local dtb_tmp_dir=`dirname "${kernel_dtb_path}"|tr -d "/"`
		dialog_checkbox_lst+="${dtb_tmp_name} \"${dtb_tmp_dir}\" off "
	done

	rm "${grub_config_menuitem}" &> /dev/null
	local selected_kernel_dtbs=`dialog --stdout --clear --title "install-helper" \
					--checklist "Select the DTB(s) to use with ${kernel_name}:" 20 61 8 ${dialog_checkbox_lst}`
	local kernel_dtb_lst=()
	for tmp_kernel_dtb in ${selected_kernel_dtbs}; do
		kernel_dtb_lst+=( "${tmp_kernel_dtb}" )
	done

	if [ ${#kernel_dtb_lst[@]} -eq 0 ]; then
		echo "		Adding entry: ${kernel_name}"
		echo "menuentry \"${kernel_name}\" {" >> "${grub_config_menuitem}"
		echo "	set gfxpayload=keep" >> "${grub_config_menuitem}"
		echo "	linux /boot/${kernel_name} ${kernel_args}" >> "${grub_config_menuitem}"
		echo "	initrd /boot/initrd${kernel_version}.gz" >> "${grub_config_menuitem}"
		echo "}" >> "${grub_config_menuitem}"
	else
		echo "		Adding submenu: ${kernel_name}"
		echo "submenu \"${kernel_name}\" {" >> "${grub_config_menuitem}"
		for tmp_kernel_dtb in ${kernel_dtb_lst[@]}; do
			echo "			Adding entry: ${tmp_kernel_dtb}"
			local tmp_devicetree_path=`find "${kernel_dtbs_fullpath}" -name "${tmp_kernel_dtb}"`
			tmp_devicetree_path=`echo "${tmp_devicetree_path}"| sed "s|${base_dir}||"`
			echo "	menuentry \"${kernel_name} (${tmp_kernel_dtb})\" {" >> "${grub_config_menuitem}"
			echo "		set gfxpayload=keep" >> "${grub_config_menuitem}"
			echo "		linux /boot/${kernel_name} ${kernel_args}" >> "${grub_config_menuitem}"
			echo "		initrd /boot/initrd${kernel_version}.gz" >> "${grub_config_menuitem}"
			echo "		devicetree ${tmp_devicetree_path}" >> "${grub_config_menuitem}"
			echo "	}" >> "${grub_config_menuitem}"
		done
		echo "}" >> "${grub_config_menuitem}"
	fi

	return 0
}

# DEB
###################################################################################################################################################
# Pass path to kernel package
# Creates temp directory for the contents, unpacks package, and echos that path
deb_package_extract () {
	local cwd="${PWD}"
	local kernel_package="${1}"
	local tmp_dir=`mktemp -d -p "${cwd}"`					# Create temporary directory
	if [ $? -ne 0 ]; then							# Check that was created okay
		return 1							# Return if it failed
	fi
	sudo dpkg -x "${kernel_package}" "${tmp_dir}" &> /dev/null		# Extract debian package
	if [ $? -eq 0 ]; then							# Check if extraction went okay
		echo "${tmp_dir}"						# Pass temp directory path if it was
	else
		sudo rm -rf "${tmp_dir}" &> /dev/null				# Delete temp directory otherwise
		return 1							# Flag this failed
	fi
	return 0								# Flag this passed
}

# RPM
###################################################################################################################################################
# Pass path to kernel package
# Creates temp directory for the contents, unpacks package, and echos that path
rpm_package_extract () {
	local cwd="${PWD}"
	local kernel_package=`realpath "${1}"`					# Get kernel package absolute path (we're changing directories later)
	if [ $? -ne 0 ]; then							# Check that ran okay
		return 1							# Return if not
	fi
	local tmp_dir=`mktemp -d -p "${cwd}"`					# Create temporary directory
	if [ $? -ne 0 ]; then							# Check that was created okay
		return 1							# Return if it failed
	fi
	cd "${tmp_dir}" &> /dev/null						# Change to temp directory
	if [ $? -ne 0 ]; then							# Check that was fine
		return 1							# Why it would fail...
	fi
	rpm2cpio "${kernel_package}" |sudo cpio -idm &> /dev/null		# Extract redhat package
	local retval=$?								# Save extraction status
	cd "${cwd}" &> /dev/null						# Change back to working directory
	if [ $? -ne 0 ]; then							# Check that worked
		echo "!!!Something bad happened here!!!"			# This is non recoverable
		exit
	fi
	if [ "${retval}" -eq 0 ]; then						# Check if extraction went okay
		echo "${tmp_dir}"						# Pass temp directory path if it was
	else
		sudo rm -rf "${tmp_dir}"					# Delete temp directory otherwise
		return 1							# Flag this failed
	fi
	return 0								# Flag this passed
}
