
###################################################################################################################################################
# URLs
###################################################################################################################################################
GIT_REPO="https://git.savannah.gnu.org/git/grub.git"

###################################################################################################################################################
# Paths
###################################################################################################################################################
CWD=$PWD

DIR_INITRD="${CWD}/initrd"
DIR_MAKEJAIL="${CWD}/makejail"
DIR_EXTRAS="${CWD}/extras"
DIR_USBKEY="${CWD}/usb_key"
DIR_USBKEY_BOOT="${DIR_USBKEY}/boot"
DIR_EFI_BOOT="${DIR_USBKEY}/EFI/Boot"
EFI_GRUB="/EFI/grub"
DIR_EFI_GRUB="${DIR_USBKEY}/${EFI_GRUB}"
DIR_EFI_GRUBMODS="${DIR_EFI_GRUB}/modules"
DIR_USBKEYFILES="${CWD}/usb_key-files"
DIR_GRUB="${DIR_USBKEYFILES}/grub"

FILE_EFI_GRUBBOOT="${DIR_EFI_GRUB}/BOOTAA64.EFI"
FILE_EFI_GRUBCFG="${DIR_EFI_GRUB}/grub.cfg"

###################################################################################################################################################
# Defines
###################################################################################################################################################
TXT_UNDERLINE="\033[1m\033[4m"
TXT_NORMAL="\033[0m"

###################################################################################################################################################
# Functions
###################################################################################################################################################
okay_failedexit () {
	if [ $1 -eq 0 ]; then
		echo "Okay"
	else
		echo "Failed"
		exit
	fi
}

identify_package_type () {
	file -0 -F "" "${1}" |awk -F "\0" 'BEGIN {RTN="unknown"}; /Debian binary package/ {RTN="debian"}; /RPM/ {RTN="redhat"}; END {print RTN}'
}

# Copies the contents of one directory to another
# This is done in a way to be mindful of symlinks in the target directory
copy_source_2_target () {
	local dir_source="${1}"
	local dir_target="${2}"

	for tmp_item_source in `ls "${dir_source}"`; do							# Cycle through the source directory contents
		local path_item_source="${dir_source}"/"${tmp_item_source}"
		local path_item_target="${dir_target}"/"${tmp_item_source}"
		if [ -e "${path_item_target}" ]; then							# Check if the destination exists
			local path_item_target_abs=`realpath "${path_item_target}"`			# Follow any symlinks
			if [ $? -ne 0 ]; then								# Check realpath status code
				return 1								# It failed, so this failed
			fi
			sudo cp -a "${path_item_source}"/* "${path_item_target_abs}" &> /dev/null	# Copy the contents of the directory, to the 'realpath'
			if [ $? -ne 0 ]; then								# Check copy status code
				return 1								# It failed, so this failed
			fi
		else
			sudo cp -a "${path_item_source}" "${dir_target}" &> /dev/null			# Item doesn't exist, just copy
			if [ $? -ne 0 ]; then								# Check copy status code
				return 1								# It failed, so this failed
			fi
		fi
	done

	return 0											# Return okay
}

# DEB
###################################################################################################################################################
# Pass path to kernel package
# Creates temp directory for the contents, unpacks package, and echos that path
deb_package_extract () {
	local cwd="${PWD}"
	local kernel_package="${1}"
	local tmp_dir=`mktemp -d -p "${cwd}"`					# Create temporary directory
	if [ $? -ne 0 ]; then							# Check that was created okay
		return 1							# Return if it failed
	fi
	sudo dpkg -x "${kernel_package}" "${tmp_dir}" &> /dev/null		# Extract debian package
	if [ $? -eq 0 ]; then							# Check if extraction went okay
		echo "${tmp_dir}"						# Pass temp directory path if it was
	else
		sudo rm -rf "${tmp_dir}" &> /dev/null				# Delete temp directory otherwise
		return 1							# Flag this failed
	fi
	return 0								# Flag this passed
}

# RPM
###################################################################################################################################################
# Pass path to kernel package
# Creates temp directory for the contents, unpacks package, and echos that path
rpm_package_extract () {
	local cwd="${PWD}"
	local kernel_package=`realpath "${1}"`					# Get kernel package absolute path (we're changing directories later)
	if [ $? -ne 0 ]; then							# Check that ran okay
		return 1							# Return if not
	fi
	local tmp_dir=`mktemp -d -p "${cwd}"`					# Create temporary directory
	if [ $? -ne 0 ]; then							# Check that was created okay
		return 1							# Return if it failed
	fi
	cd "${tmp_dir}" &> /dev/null						# Change to temp directory
	if [ $? -ne 0 ]; then							# Check that was fine
		return 1							# Why it would fail...
	fi
	rpm2cpio "${kernel_package}" |sudo cpio -idm &> /dev/null		# Extract redhat package
	local retval=$?								# Save extraction status
	cd "${cwd}" &> /dev/null						# Change back to working directory
	if [ $? -ne 0 ]; then							# Check that worked
		echo "!!!Something bad happened here!!!"			# This is non recoverable
		exit
	fi
	if [ "${retval}" -eq 0 ]; then						# Check if extraction went okay
		echo "${tmp_dir}"						# Pass temp directory path if it was
	else
		sudo rm -rf "${tmp_dir}"					# Delete temp directory otherwise
		return 1							# Flag this failed
	fi
	return 0								# Flag this passed
}
