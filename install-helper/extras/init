#!/bin/bash

# Default PATH differs between shells, and is not automatically exported
# by klibc dash.  Make it consistent.
# Furthermore, this PATH ends up being used by the init, set it to the
# Standard PATH, without /snap/bin as documented in
# https://wiki.ubuntu.com/PATH
# This also matches /etc/environment, but without games path
export PATH=/opt:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
mkdir -p /var/lock

# Mount /proc
mount -t proc -o nodev,noexec,nosuid proc /proc
if [ ! -e /proc/filesystems ]; then
	echo "Procfs mount failed..."
	exit
fi

# Mount /sys
if ! grep -q '[[:space:]]sysfs$' /proc/filesystems; then
	echo "Sysfs not available, stopping!"
	exit
fi
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
if [ -d /sys/class/mem/null -a ! -L /sys/class/mem/null ] || \
   [ -e /sys/block -a ! -e /sys/class/block ]; then
	echo "CONFIG_SYSFS_DEPRECATED must not be selected"
	echo "Booting will continue in 30 seconds but many things will be broken"
	sleep 30
fi

# shellcheck disable=SC2013
for x in $(cat /proc/cmdline); do
	case $x in
	initramfs.clear)
		clear
		;;
	quiet)
		quiet=y
		;;
	esac
done

if [ "$quiet" != "y" ]; then
	quiet=n
	echo "Loading, please wait..."
fi
export quiet

# Note that this only becomes /dev on the real filesystem if udev's scripts
# are used; which they will be, but it's worth pointing out
# Mount /dev
if ! grep -q '[[:space:]]devtmpfs$' /proc/filesystems; then
	echo "Devtmpfs not available, stopping!"
	exit
fi
mount -t devtmpfs -o nosuid,mode=0755 udev /dev
# Mount /dev/pts
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

# Export the dpkg architecture
export DPKG_ARCH=
. /conf/arch.conf

# Set modprobe env
export MODPROBE_OPTIONS="-qb"

# Export relevant variables
export ROOT=
export ROOTDELAY=
export ROOTFLAGS=
export ROOTFSTYPE=
export IP=
export IP6=
export VLAN=
export DEVICE=
export BOOT=
export BOOTIF=
export UBIMTD=
export NETWORK_SKIP_ENSLAVED=
export break=
export init=/sbin/init
export readonly=y
export rootmnt=/rootfsmnt
export debug=
export panic=
export blacklist=
export resume=
export resume_offset=
export noresume=
export drop_caps=
export fastboot=n
export forcefsck=n
export fsckfix=

# mdadm needs hostname to be set. This has to be done before the udev rules are called!
if [ -f "/etc/hostname" ]; then
        /bin/hostname -F /etc/hostname >/dev/null 2>&1
fi

# Bring in the main config
. /conf/initramfs.conf
for conf in conf/conf.d/*; do
	[ -f "${conf}" ] && . "${conf}"
done
. /scripts/functions

# Parse command line options
# shellcheck disable=SC2013
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		init=${x#init=}
		;;
	root=*)
		ROOT=${x#root=}
		if [ -z "${BOOT}" ] && [ "$ROOT" = "/dev/nfs" ]; then
			BOOT=nfs
		fi
		;;
	rootflags=*)
		ROOTFLAGS="-o ${x#rootflags=}"
		;;
	rootfstype=*)
		ROOTFSTYPE="${x#rootfstype=}"
		;;
	rootdelay=*)
		ROOTDELAY="${x#rootdelay=}"
		case ${ROOTDELAY} in
		*[![:digit:].]*)
			ROOTDELAY=
			;;
		esac
		;;
	roottimeout=*)
		ROOTDELAY="${x#roottimeout=}"
		case ${ROOTDELAY} in
		*[![:digit:].]*)
			ROOTDELAY=
			;;
		esac
		;;
	loop=*)
		# shellcheck disable=SC2034
		LOOP="${x#loop=}"
		;;
	loopflags=*)
		# shellcheck disable=SC2034
		LOOPFLAGS="-o ${x#loopflags=}"
		;;
	loopfstype=*)
		# shellcheck disable=SC2034
		LOOPFSTYPE="${x#loopfstype=}"
		;;
	nfsroot=*)
		# shellcheck disable=SC2034
		NFSROOT="${x#nfsroot=}"
		;;
	initramfs.runsize=*)
		RUNSIZE="${x#initramfs.runsize=}"
		;;
	ip=*)
		IP="${x#ip=}"
		;;
	ip6=*)
		IP6="${x#ip6=}"
		;;
	vlan=*)
		VLAN="${x#vlan=}"
		;;
	boot=*)
		BOOT=${x#boot=}
		;;
	ubi.mtd=*)
		UBIMTD=${x#ubi.mtd=}
		;;
	resume=*)
		RESUME="${x#resume=}"
		case $RESUME in
		UUID=*)
			RESUME="/dev/disk/by-uuid/${RESUME#UUID=}"
		esac
		;;
	resume_offset=*)
		resume_offset="${x#resume_offset=}"
		;;
	noresume)
		noresume=y
		;;
	drop_capabilities=*)
		drop_caps="-d ${x#drop_capabilities=}"
		;;
	panic=*)
		panic="${x#panic=}"
		case ${panic} in
		-1) ;;
		*[![:digit:].]*)
			panic=
			;;
		esac
		;;
	ro)
		readonly=y
		;;
	rw)
		readonly=n
		;;
	debug)
		debug=y
		quiet=n
		if [ -n "${netconsole}" ]; then
			log_output=/dev/kmsg
		else
			log_output=/run/initramfs/initramfs.debug
		fi
		set -x
		;;
	debug=*)
		debug=y
		quiet=n
		set -x
		;;
	break=*)
		break=${x#break=}
		;;
	break)
		break=premount
		;;
	blacklist=*)
		blacklist=${x#blacklist=}
		;;
	netconsole=*)
		netconsole=${x#netconsole=}
		[ "x$debug" = "xy" ] && log_output=/dev/kmsg
		;;
	BOOTIF=*)
		BOOTIF=${x#BOOTIF=}
		;;
	hwaddr=*)
		BOOTIF=${x#hwaddr=}
		;;
	fastboot|fsck.mode=skip)
		fastboot=y
		;;
	forcefsck|fsck.mode=force)
		forcefsck=y
		;;
	fsckfix|fsck.repair=yes)
		fsckfix=y
		;;
	fsck.repair=no)
		fsckfix=n
		;;
	esac
done

# Default to BOOT=local if no boot script defined.
if [ -z "${BOOT}" ]; then
	BOOT=local
fi

if [ -n "${noresume}" ] || [ "$RESUME" = none ]; then
	noresume=y
else
	resume=${RESUME:-}
fi

mount -t tmpfs -o "noexec,nosuid,size=${RUNSIZE:-10%},mode=0755" tmpfs /run
mkdir -m 0755 /run/initramfs

if [ -n "$log_output" ]; then
	exec >$log_output 2>&1
	unset log_output
fi

maybe_break top

# export BOOT variable value for compcache,
# so we know if we run from casper
export BOOT

# Don't do log messages here to avoid confusing graphical boots
run_scripts /scripts/init-top

maybe_break modules
[ "$quiet" != "y" ] && log_begin_msg "Loading essential drivers"
[ -n "${netconsole}" ] && modprobe netconsole netconsole="${netconsole}"
load_modules
[ "$quiet" != "y" ] && log_end_msg

# Load additional kernel modules & configure devices
# Disable any hotplug helpers
if [ -w /sys/kernel/uevent_helper ]; then
	echo > /sys/kernel/uevent_helper
fi
# clean up the database
udevadm info --cleanup-db
# Start udev
echo "udev: Starting..."
/usr/sbin/udevd --daemon
if [ ${?} -eq 0 ];then
	echo "udev: Synthesizing the initial hotplug events (subsystems)"
	udevadm trigger --type=subsystems --action=add
	echo "udev: Synthesizing the initial hotplug events (devices)"
	udevadm trigger --type=devices --action=add

	echo -n "udev: Waiting for /dev to be fully populated: "
	if udevadm settle; then
		echo "Okay"
	else
		echo 'Timeout'
	fi
	echo "udev: Stopping..."
	/bin/killall udevd
fi

maybe_break premount
[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-premount"
run_scripts /scripts/init-premount
[ "$quiet" != "y" ] && log_end_msg

# Update path
PATH=$PATH:/install-helper

# Import function
. /install-helper/ih-functions

# Init LVM
modprobe dm-mod
vgchange -ay

# Mount the device associated with the partition label IHFILES.
mkdir /media

ih_retry=0
# Wait for USB key to become available
while true; do
	echo -n "Looking for device with partition label 'IHFILES': "
	IHFILES_DEV=`blkid -o device -L IHFILES`
	if [ -n "${IHFILES_DEV}" ]; then
		echo "${IHFILES_DEV}"
		mount -t ext3 ${IHFILES_DEV} /media
		break
	else
		ih_retry=$((ih_retry+1))
		echo 'Not found'
		sleep 1
	fi
	if [ ${ih_retry} -eq 10 ]; then
		break;
	fi
done

# Set console log level
echo "3" > /proc/sys/kernel/printk

# Configure console
if command -v chvt >/dev/null 2>&1; then
        chvt 1
fi
run_scripts /scripts/panic

# Start menu
# Try to use setsid, which will enable job control in the shell
# and paging in more
if command -v setsid >/dev/null 2>&1; then
	unset IFS
	read -r console rest </proc/consoles
	if [ "${console}" = "tty0" ]; then
		# Need to choose a specific VT
		console="tty1"
	fi
	# We don't have 'setsid -c' so we need to setsid, open
	# the tty, and finally exec an interactive shell
	setsid sh -c "exec ih-menu <>/dev/${console} 1>&0 2>&1"
else
	ih-menu </dev/console >/dev/console 2>&1
fi
ih_retval=${?}

# Check if rootmnt is mounted
rootmnt_count=`mount | grep -c "${rootmnt}"`

if { [ ${ih_retval} -ge 230 ] && [ ${ih_retval} -le 240 ]; } && [ ${rootmnt_count} -ne 0 ]; then
#	#validate_init() {
#	#	run-init -n "${rootmnt}" "${1}"
#	#}
#
#	## Check init is really there
#	#if ! validate_init "$init"; then
#	#	echo "Target filesystem doesn't have requested ${init}."
#	#	init=
#	#	for inittest in /sbin/init /etc/init /bin/init /bin/sh; do
#	#		if validate_init "${inittest}"; then
#	#			init="$inittest"
#	#			break
#	#		fi
#	#	done
#	#fi
#
#	## No init on rootmount
#	#if ! validate_init "${init}" ; then
#	#	panic "No init found. Try passing init= bootarg."
#	#fi

	init="/bin/sh"
	tmp_init=`ih_init_identify "${rootmnt}"`
	if [ ${?} -eq 0 ]; then
		init="${tmp_init}"
	fi
	echo "Found: ${init}"

	maybe_break init

	# don't leak too much of env - some init(8) don't clear it
	# (keep init, rootmnt, drop_caps)
	unset debug
	unset MODPROBE_OPTIONS
	unset DPKG_ARCH
	unset ROOTFLAGS
	unset ROOTFSTYPE
	unset ROOTDELAY
	unset ROOT
	unset IP
	unset IP6
	unset VLAN
	unset BOOT
	unset BOOTIF
	unset DEVICE
	unset UBIMTD
	unset blacklist
	unset break
	unset noresume
	unset panic
	unset quiet
	unset readonly
	unset resume
	unset resume_offset
	unset noresume
	unset fastboot
	unset forcefsck
	unset fsckfix

	if [ ${ih_retval} -eq 230 ]; then exec switch_root "${rootmnt}" "${init}"; fi
	if [ ${ih_retval} -eq 234 ]; then exec chroot "${rootmnt}" "/bin/sh"; fi
	if [ ${ih_retval} -eq 235 ]; then exec chroot "${rootmnt}" "${init}"; fi
	echo "Something went badly wrong in the initramfs."
	panic "Please file a bug on initramfs-tools."
fi

# Reboot
ih_umount_all
echo b > /proc/sysrq-trigger
