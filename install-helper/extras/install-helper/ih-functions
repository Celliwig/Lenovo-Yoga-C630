#!/bin/bash
# $Id: setup-vars,v 1.3 2012/06/29 09:52:26 tom Exp $
# vile:shmode

# These symbols are defined to use in the sample shell scripts to make them
# more readable.  But they are (intentionally) not exported.  If they were
# exported, they would also be visible in the dialog program (a subprocess).

: ${DIALOG=dialog}

: ${DIALOG_OK=0}
: ${DIALOG_CANCEL=1}
: ${DIALOG_HELP=2}
: ${DIALOG_EXTRA=3}
: ${DIALOG_ITEM_HELP=4}
: ${DIALOG_ESC=255}

: ${SIG_NONE=0}
: ${SIG_HUP=1}
: ${SIG_INT=2}
: ${SIG_QUIT=3}
: ${SIG_KILL=9}
: ${SIG_TERM=15}

ih_grub_cfg_identify() {
	local ih_grub_cfg_root_path="${1}"
	while IFS= read -r tmp_grub_cfg_path; do
		# Check for actual menu entries, not just general include directive
		grep '^menuentry ' "${tmp_grub_cfg_path}" &> /dev/null
		if [ ${?} -eq 0 ]; then
			echo "${tmp_grub_cfg_path}"
			return 0
		fi
	done <<< `find "${ih_grub_cfg_root_path}" -name grub.cfg`
	return 1
}

ih_grub_cfg_menu_entry_select() {
	local ih_grub_cfg_path="${1}"
	local ih_grub_cfg_menu_entry_path=()
	local ih_grub_cfg_menu_entry_path_txt=""
	local ih_grub_cfg_menu_entries_txt=""

	local tmp_loop=true
	while ${tmp_loop};do
		# Generate dialog list selection
		local ih_grub_cfg_menu_entry_list=()
		local ih_grub_cfg_menu_entry_index=1
		while IFS= read -r tmp_grub_cfg_menu_entry; do
			ih_grub_cfg_menu_entry_list+=("${ih_grub_cfg_menu_entry_index}")
			ih_grub_cfg_menu_entry_list+=("${tmp_grub_cfg_menu_entry}")
			ih_grub_cfg_menu_entry_index=$((ih_grub_cfg_menu_entry_index+1))
		done <<< `grub-cfg -t -f "${ih_grub_cfg_path}"${ih_grub_cfg_menu_entry_path_txt}`

		# Show dialog
		tmp_bselect=`${DIALOG} --stdout --clear --title "install-helper" \
			--menu "Select boot option:\n\n" 14 71 5 "${ih_grub_cfg_menu_entry_list[@]}"`
		ih_retval="${?}"

		# Update the path
		if [ ${ih_retval} -eq 0 ]; then
			# Add selected
			ih_grub_cfg_menu_entry_path+=(${tmp_bselect})
		elif [ ${ih_retval} -eq 255 ]; then
			# We've hit escape, so just return
			return 1
		else
			if [ ${#ih_grub_cfg_menu_entry_path[@]} -gt 0 ]; then
				# Remove last selection
				unset 'ih_grub_cfg_menu_entry_path[${#ih_grub_cfg_menu_entry_path[@]}-1]'
			else
				# Or return if we are at the root level
				return 1
			fi
		fi

		# Evaluate current path
		ih_grub_cfg_menu_entry_path_txt=""
		for tmp_selection in ${ih_grub_cfg_menu_entry_path[@]}; do
			ih_grub_cfg_menu_entry_path_txt+=" "
			ih_grub_cfg_menu_entry_path_txt+="${tmp_selection}"
		done

		# Make sure we're not back at the root again
		if [ ${#ih_grub_cfg_menu_entry_path[@]} -gt 0 ]; then
			#echo grub-cfg -t -f "${ih_grub_cfg_path}"${ih_grub_cfg_menu_entry_path_txt}
			grub-cfg -t -f "${ih_grub_cfg_path}"${ih_grub_cfg_menu_entry_path_txt} &> /dev/null
			if [ ${?} -eq 0 ]; then
				echo "${ih_grub_cfg_menu_entry_path_txt}"
				return 0
			fi
		fi
	done
}

ih_grub_cfg_extract_menu_entry_kernel_filepath() {
	# Need a better way of extracting filename, this could easily match on a path
	local ih_grub_cfg_kernel_str=`echo "${1}"| cut -d' ' -f1`
	local ih_grub_cfg_kernel_path_prefix="${2}"
	# Get only the kernel directory path (kernel arg can mess with dirname so drop everything but first)
	local ih_grub_cfg_kernel_path=`dirname ${ih_grub_cfg_kernel_str}| head -n1`
	if [[ "${ih_grub_cfg_kernel_path}" != "/" ]]; then
		ih_grub_cfg_kernel_path+="/"
	fi
	# We need to find the longest match to remove the kernel string, so reverse ls
	for tmp_filename in `ls -r "${ih_grub_cfg_kernel_path_prefix}${ih_grub_cfg_kernel_path}" 2> /dev/null`; do
		if [[ "${ih_grub_cfg_kernel_str}" == "${ih_grub_cfg_kernel_path}${tmp_filename}"* ]]; then
			echo "${ih_grub_cfg_kernel_path}${tmp_filename}"
			return 0
		fi
	done
	return 1
}

ih_grub_cfg_extract_menu_entry_kernel_args() {
	local ih_grub_cfg_kernel_str="${1}"
	local ih_grub_cfg_kernel_filepath="${2}"
	local ih_grub_cfg_kernel_args=`echo "${ih_grub_cfg_kernel_str}"| sed "s|${ih_grub_cfg_kernel_filepath}||"`
	ih_grub_cfg_kernel_args=`echo "${ih_grub_cfg_kernel_args}"| sed "s| quiet | |"`
	ih_grub_cfg_kernel_args=`echo "${ih_grub_cfg_kernel_args}"| sed "s| splash | |"`
	echo "${ih_grub_cfg_kernel_args}"
}

ih_file_identify() {
	local ih_file_path="${1}"
	local ih_file_type=`file -0 -F '' "${ih_file_path}"| cut -d '' -f2| sed 's/[[:space:]]*//'`
	if [ ${?} -eq 0 ]; then
		ih_file_type_awk=`echo "${ih_file_type}"| awk "match(\\$0, /^([a-zA-Z0-9]+ compressed data)/, tmp_entry) {print tmp_entry[1]}"`
		if [ ${?} -eq 0 ]; then
			echo "${ih_file_type_awk}"
			return 0
		else
			echo "${ih_file_type}"
			return 0
		fi
	else
		echo ''
		return 1
	fi
}

ih_umount() {
	local ih_fs_mount=${1}
	echo -n "	Unmounting ${ih_fs_mount}: "
	umount ${ih_fs_mount} &> /dev/null
	if [ ${?} -eq 0 ]; then
		echo "Okay"
	else
		echo "Failed"
	fi
}

ih_umount_nested() {
	local ih_fs_mount_check=${1}
	# Unmount nested filesystems
	for nested_fs_mount in `mount |awk "/\\\\${ih_fs_mount_check}/ {print \\$3}"|sort -r`; do
		if [[ "${ih_fs_mount_check}" != "${nested_fs_mount}" ]]; then
			ih_umount "${nested_fs_mount}"
		fi
	done
}

ih_umount_all() {
	sync

	echo "Unmounting filesystems:"
	# First unmount any loop devices
	for tmp_loop_device in $(losetup --all|awk -F ':' '{print $1}'); do
		ih_umount "${tmp_loop_device}"
	done

	# Destroy any loop devices
	for tmp_loop_device in $(losetup --all|awk -F ':' '{print $1}'); do
		echo -n "	Destroying ${tmp_loop_device}: ";
		losetup -d ${tmp_loop_device} &> /dev/null
		if [ ${?} -eq 0 ]; then
			echo "Okay"
		else
			echo "Failed"
		fi
	done

	# Unmount nested filesystems
	for mounted_fs in `mount |awk '/^\// {print $3}'`; do
		ih_umount_nested "${mounted_fs}"
	done

	# Unmount filesystems
	for mounted_fs in `mount |awk '/^\// {print $1}'`; do
		ih_umount "${mounted_fs}"
	done

	sleep 3
}

ih_show_msg() {
	local message="${1}"
	local rows="${2}"
	local columns="${3}"
	$DIALOG --stdout --title "install-helper" --msgbox "${message}" "${rows}" "${columns}"
}

ih_show_select_device() {
	tmp_dselect=`"${DIALOG}" --stdout --clear "$@" --fselect /dev/ 14 48`
	retval="${?}"
	if [ "${retval}" -eq 0 ]; then
		echo "${tmp_dselect}"
		return 0
	else
		echo ''
		return "${retval}"
	fi
}

ih_show_select_blockdevice() {
	while true; do
		tmp_dselect=`ih_show_select_device --title "Please choose a block device."`
		retval="${?}"
		if [ "${retval}" -eq 0 ]; then
			local blockdevice_name=`basename "${tmp_dselect}"`
			if [ -e /sys/block/"${blockdevice_name}" ]; then
				echo "${tmp_dselect}"
				return 0
			else
				ih_show_msg "Error: Please select a block device." 5 45
			fi
		else
			echo ''
			return "${retval}"
		fi
	done
}

ih_show_select_rootdevice() {
	while true; do
		tmp_dselect=`ih_show_select_device --title "Please choose a partition."`
		retval="${?}"
		if [ "${retval}" -eq 0 ]; then
			local rootdevice_name=`realpath "${tmp_dselect}"`
			local rootdevice_rslt=`blkid -o device|grep -c "^${rootdevice_name}\$"`
			if [ ${rootdevice_rslt} -eq 1 ]; then
				echo "${tmp_dselect}"
				return 0
			else
				ih_show_msg "Error: Please select root device." 5 45
			fi
		else
			echo ''
			return "${retval}"
		fi
	done
}

ih_show_select_images() {
	while true; do
		tmp_dselect=`"${DIALOG}" --stdout --clear --title "Please choose an install image." "$@" --fselect /media/images 14 48`
		retval="${?}"
		if [ "${retval}" -eq 0 ]; then
			local image_filename="${tmp_dselect}"
			if [ -f "${image_filename}" ]; then
				echo "${image_filename}"
				return 0
			else
				ih_show_msg "Error: ${image_filename} is not a file." 5 45
			fi
		else
			echo ''
			return "${retval}"
		fi
	done
}
